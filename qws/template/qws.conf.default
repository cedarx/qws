lua_shared_dict UPSTREAM 100m;
lua_shared_dict counter 10m;

lua_ssl_trusted_certificate "";
lua_ssl_verify_depth 1;

proxy_next_upstream_tries 999;
proxy_intercept_errors on;
proxy_ssl_server_name on;

#underscores_in_headers on;

init_by_lua_block
{
    qws = require "qws.qws"
    qws.init()
}

init_worker_by_lua_block
{
    qws.init_worker()
}

upstream qws_upstream {
    server 0.0.0.1;
    balancer_by_lua_block {
        qws.balancer()
    }
    keepalive 100;
}

server {
    server_name qws.qiucloud.com;
    listen 80;

    listen 443 ssl;
    ssl_certificate "";
    ssl_certificate_key "";

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!ADH:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:1m;
    ssl_session_timeout 5m;

    ssl_certificate_by_lua_block {
        qws.ssl_certificate()
    }
	
    error_page 400 401 403 404 /error.html;
    error_page 500 502 503 504 /error.html;

    location = /error.html {
        set $template_root nil;
        content_by_lua_block {
            local err_handle = require "qws.core.error"
            err_handle:run(ngx)
        }
    }
    
    location / {
        set $upstream_host nil;
        set $upstream_scheme nil;
        set $upstream_uri "";

        access_by_lua_block {
            qws.access()
        }

        proxy_http_version 1.1;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $upstream_host;
        proxy_pass_header Server;
        proxy_pass $upstream_scheme://qws_upstream$upstream_uri;

        header_filter_by_lua_block {
            qws.header_filter()   
        }

        body_filter_by_lua_block {
            qws.body_filter()
        }

        log_by_lua_block {
            
        }
    }
}
server {
    server_name console.qiucloud.com;
    listen 9898;

    header_filter_by_lua_block {
        local config = require "qws.config.config"
        ngx.header["Server"] = config.VER
    }

    #qws dashboard
    location / {
        set $template_root nil;
        default_type "text/html;charset=utf-8";
        content_by_lua_block {
            local controller = require "qws.core.controller"
            controller.run()
        }
    }

    location ~ .*\.(js|css|png|jpg|woff2|ttf|ico)?$
    {
        root /home/work/workspace/qws.git/qws/_admin;
        expires      30d;
    }
}
